# -*- coding: utf-8 -*-
"""CambiosPatrimonioSMV.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1Fcgxd7UqwFje97KQZpc-op1lmdtPPBpo
"""


import streamlit
import requests
import pandas as pd

url = "https://mvnet.smv.gob.pe/SMV.OData.Api/api/InfFinanciera/CambiosPatrimonioSMV?sEjercicio=2025&sPeriodo=1&sTipoInf=I&sRpj=B80004"

try:
    response = requests.get(url)
    response.raise_for_status() # Raise an exception for bad status codes
    data = response.json()

    if data and 'data' in data and isinstance(data['data'], list): # Check if 'data' key exists and is a list
        df = pd.DataFrame(data['data']) # Access data using the correct key
        print("Data loaded successfully. Here is the head of the DataFrame:")
        display(df.head())
        print("\nHere is information about the DataFrame:")
        df.info()
    else:
        print("The response does not contain the expected data format or is empty.")
        print("Full response:")
        print(data)

except requests.exceptions.RequestException as e:
    print(f"Error fetching data from the endpoint: {e}")
except ValueError as e:
    print(f"Error decoding JSON from the response: {e}")
except Exception as e:
    print(f"An unexpected error occurred: {e}")

display(df)

unique_descripcion_columna_in_sorted = df_saldos_sorted_orden_desc['DescripcionColumna'].unique()

for descripcion_columna_value in unique_descripcion_columna_in_sorted:
    print(f"\nRegistros para DescripcionColumna: {descripcion_columna_value}")
    filtered_df_by_desc = df_saldos_sorted_orden_desc[df_saldos_sorted_orden_desc['DescripcionColumna'] == descripcion_columna_value]
    display(filtered_df_by_desc)

import matplotlib.pyplot as plt
import seaborn as sns

# Assuming df_saldos contains the data where 'DescripcionCuenta' starts with 'SALDOS'
if 'df_saldos' in locals():
    df_for_plotting_saldos = df_saldos
else:
    # If df_saldos doesn't exist, filter the original df
    df_for_plotting_saldos = df[df['DescripcionCuenta'].str.startswith('SALDOS')]

unique_orden_columna_saldos = df_for_plotting_saldos['OrdenColumna'].unique()

for orden_columna_value in unique_orden_columna_saldos:
    print(f"\nGr√°fico de Monto1 por DescripcionCuenta para OrdenColumna: {orden_columna_value}")
    filtered_df_by_orden = df_for_plotting_saldos[df_for_plotting_saldos['OrdenColumna'] == orden_columna_value]

    if not filtered_df_by_orden.empty:
        plt.figure(figsize=(12, max(4, len(filtered_df_by_orden) * 0.8))) # Adjust figure size based on number of rows
        sns.barplot(x='Monto1', y='DescripcionCuenta', data=filtered_df_by_orden)
        plt.title(f'Monto1 por DescripcionCuenta (Saldos) - OrdenColumna: {orden_columna_value}')
        plt.xlabel('Monto1')
        plt.ylabel('DescripcionCuenta')
        plt.tight_layout()
        plt.show()
    else:
        print(f"No data to plot for OrdenColumna: {orden_columna_value}")
